{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1l_GPJjnpKNgfxCGYwBYdhk5eQjOdijks","timestamp":1730455663387}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Ссылка на материалы:  [пдф тут](https://drive.google.com/file/d/16Cm2tgrpuDH8eIdxdSYyOsfDPqnJ3byd/view?usp=sharing)"],"metadata":{"id":"M9IlAZAPBBm9"}},{"cell_type":"markdown","source":["ФИО:"],"metadata":{"id":"ZLVI_WIcuT56"}},{"cell_type":"markdown","source":["## Задание 1. HTTP-запросы, ответы и погода"],"metadata":{"id":"Gtm1UjYgDlY7"}},{"cell_type":"markdown","source":["Описание:\n","\n","Напишите HTTP-запрос для получения информации о погоде в введенном городе из API.\n","\n","Можно использовать API: https://open-meteo.com/. Используйте метод GET.\n","\n","\n","Ввод\n","```\n","56.50, 60.35\n","```\n","\n","Вывод\n","```\n","Сегодня (1.11) погода 20 ◦С, нет осадков, туман\n","```\n","\n","\n","\n"],"metadata":{"id":"FtjnLNIKzfMZ"}},{"cell_type":"code","source":["pip install requests"],"metadata":{"id":"5Mbs40_buVRV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1730455699470,"user_tz":-300,"elapsed":9315,"user":{"displayName":"NeZOX Btw","userId":"14688053011424439291"}},"outputId":"c962bfd2-1a13-49d9-846a-88915290551a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (2.32.3)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests) (3.4.0)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests) (2.2.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests) (2024.8.30)\n"]}]},{"cell_type":"code","source":["import requests\n","from datetime import datetime\n","\n","# отправляем запрос\n","def requests_send(url):\n","    response = requests.get(url)\n","    if response.status_code == 200:\n","        return response.json()\n","    else:\n","        print('Номер ошибки', response.status_code)\n","        return None\n","\n","\n","def clear_data(data):\n","    # находим дату\n","    day = datetime.today().date().day\n","    month = datetime.today().date().month\n","\n","    # находим температуру\n","    temperature = data['current']['temperature_2m']\n","    temperatore_code = data['current_units']['temperature_2m']\n","\n","    # находим погодные условия\n","    weather_code = data['current']['weather_code']\n","    weather_conditions = ''\n","    if weather_code in [0, 1]:\n","        weather_conditions = 'нет осадков, ясно'\n","    elif weather_code == 45:\n","        weather_conditions = 'нет осадков, туман'\n","    elif weather_code in [51, 53, 55, 61, 63, 65, 71, 73, 75, 80, 81, 82, 85, 86]:\n","        weather_conditions = 'осадки, без тумана'\n","    else:\n","        weather_conditions = 'глянь в окно'\n","\n","    message = f'Сегодня ({day}.{month}) погода {temperature} {temperatore_code}, {weather_conditions}'\n","    return message\n","\n","\n","def main():\n","    coordinates = input('Введите координаты\\n').split(', ')\n","    url = f'https://api.open-meteo.com/v1/forecast?latitude={coordinates[0]}&longitude={coordinates[1]}&current=temperature_2m,weather_code'\n","    data = requests_send(url)\n","    print(clear_data(data))\n","\n","\n","main()\n"],"metadata":{"id":"Xb_VMP40LLCC"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Задание 2. HTTP-запросы, ответы и покемоны"],"metadata":{"id":"FYjU9WmVDoGs"}},{"cell_type":"markdown","source":["**Описание:**\n","\n","\n","Создайте код программы, которая будет взаимодействовать с API, со следующим функионалом:\n","\n","1. Используя метод GET, отправьте запрос на endpoint /pokemon, чтобы получить список первых 20 покемонов\n","\n","2. Извлеките имена покемонов из ответа и выведите их списком\n","\n","3. Введите с помощью input() название одного из покемонов\n","\n","\n","```\n","Имя покемона: clefairy\n","```\n","\n","\n","\n","4. Отправьте GET-запрос, чтобы получить полную информацию о выбранном покемоне\n","\n","5. Извлеките и выведите следующие данные о введенном покемоне:\n","\n","     • Имя\n","\n","     • Тип\n","\n","     • Вес\n","\n","     • Рост\n","\n","     • Способности\n","\n","Используйте PokéAPI (https://pokeapi.co/), который предоставляет информацию о покемонах, их характеристиках, типах и другую информацию."],"metadata":{"id":"oZ1guEbl0PZm"}},{"cell_type":"code","source":["import requests\n","\n","\n","# отправляем запрос\n","def requests_send(url):\n","    response = requests.get(url)\n","    if response.status_code == 200:\n","        return response.json()\n","    else:\n","        print('Номер ошибки', response.status_code)\n","        return None\n","\n","\n","def names_pokemons(data):\n","    base_name = []\n","    for k in data:\n","        base_name.append(k['name'])\n","    base_name = ', '.join(base_name)\n","    return base_name\n","\n","\n","def info_pokemon(name):\n","    new_url = f'https://pokeapi.co/api/v2/pokemon/{name}'\n","    data = requests_send(new_url)\n","    # поиск способностей покемона\n","    ability = []\n","    for i in data['abilities']:\n","        ability.append(i['ability']['name'])\n","    ability = ', '.join(ability)\n","\n","    # тип покемона\n","    type_pokemon = []\n","    for i in data['types']:\n","        type_pokemon.append(i['type']['name'])\n","    type_pokemon = ', '.join(type_pokemon)\n","\n","    # вес\n","    weight = data['weight']\n","\n","    # рост\n","    height = data['height']\n","\n","    message = f'Имя покемона: {name}; Тип: {type_pokemon}; Вес: {weight}; Рост: {height}; Способности: {ability}'\n","    return message\n","\n","\n","def main():\n","    url = 'https://pokeapi.co/api/v2/pokemon/?limit=20'\n","    requests_send(url)\n","    data = requests_send(url)['results']\n","    print(f'Название покемонов: {names_pokemons(data)}')\n","    pokemon = input('Введите имя покемона:\\n')\n","    print(info_pokemon(pokemon))\n","\n","\n","main()\n","\n","\n","\n"],"metadata":{"id":"JkFmivjp25NL"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Задание 3. HTTP-запросы, ответы и посты"],"metadata":{"id":"Ci07uZdADue9"}},{"cell_type":"markdown","source":["**Описание:**\n","\n","Создайте программу, которая будет взаимодействовать с JSONPlaceholder API, реализуя следующие функции:\n","\n","1. Реализуйте функцию, которая выполняет GET-запрос к https://jsonplaceholder.typicode.com/posts и возвращает список постов в формате JSON\n","\n","2. Реализуйте функцию, котороая получает вводимое ID поста, выполняет GET-запрос по ID и возвращает данные поста в формате JSON\n","\n","3. Реализуйте функцию, которая выполняет обработку JSON из пункта 2 и выводит всю важную информацию в консоль"],"metadata":{"id":"h194KTer1-B3"}},{"cell_type":"code","source":["import requests\n","\n","\n","#пункт 1)отдаю апрос на сайт и возвращаю информацию о страничке з\n","def requests_send(url):\n","    response = requests.get(url)\n","    if response.status_code == 200:\n","        return response.json()\n","    else:\n","        print('Номер ошибки', response.status_code)\n","        return None\n","\n","\n","#пункт 2) отправляю и возвращаю информацию по айди\n","def requests_send_id():\n","    id = input('Введите id поста:\\n')\n","    return requests_send(url+'/'+id)\n","\n","\n","#пункт 3) обрабатываю и вывожу информацию о посте по его айди\n","def Important_information():\n","    data = requests_send_id()\n","    return print(f\"Id пользователя: {data['userId']}\\n\"\n","          f\"Id поста: {data['id']}\\n\"\n","          f\"Название поста: {data['title']}\\n\"\n","          f\"Текст поста: {data['body']}\")\n","\n","\n","def main():\n","  url = 'https://jsonplaceholder.typicode.com/posts'\n","  print(requests_send(url))\n","  print(requests_send_id())\n","  Important_information()\n","\n","\n","main()"],"metadata":{"id":"YANQx4o258Zn"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Задание 4. HTTP-запросы, ответы и работа с постами"],"metadata":{"id":"rtwepQvJDy9N"}},{"cell_type":"markdown","source":["**Описание**\n","\n","Создайте программу, которая будет взаимодействовать с JSONPlaceholder API (из предыдущего задания), реализуя новые функции:\n","\n","1. Реализуйте функцию, которая принимает заголовок, содержимое и ID пользователя (информация вводится с помощью input()), выполняет POST-запрос для создания нового поста и возвращает информацию о созданном посте в формате JSON\n","\n","\n","```\n","Заголовок: Новый пост\n","Содержимое поста: Тут должно находиться содержимое нового поста...\n","ID пользователя: 10\n","```\n","\n","\n","\n","2. Реализуйте функцию, которая принимает ID поста, новый заголовок и новое содержимое, выполняет PUT-запрос и возвращает обновлённый пост в формате JSON\n","\n","3. Реализуйте функцию, которая принимает ID поста, выполняет DELETE-запрос и возвращает статус-код ответа"],"metadata":{"id":"4MjiaxDM58ta"}},{"cell_type":"code","source":["import requests\n","\n","\n","#скопипастил из прошлой задачи\n","def requests_send_get(url):\n","    response = requests.get(url)\n","    if response.status_code == 200:\n","        return response.json()\n","    else:\n","        print('Номер ошибки', response.status_code)\n","        return None\n","\n","\n","#1)пункт задачи\n","def requests_send_post(url):\n","    #ввод пользователем информации\n","    title = input('Введите заголовок своего поста:\\n')\n","    body = input('Введите текст своего поста:\\n')\n","    user_Id = int(input('Введите id пользователя:\\n'))\n","    #добавление информации в словарь\n","    data = {'user_Id': user_Id, 'title':title, 'body':body}\n","    #отправка пост запроса на сайт\n","    response = requests.post(url,json=data)\n","    #проверка не было ли ошибок при отправке запроса\n","\n","    if response.status_code == 201:\n","        return response.json()\n","    else:\n","        print('Номер ошибки', response.status_code)\n","        return None\n","\n","\n","#2)пункт задачи\n","def requests_send_put(url):\n","    #ввод пользователя\n","    id = int(input('Введите id поста: \\n'))\n","    #добавления user_Id, не уверен что оно нужно для пут запросов\n","    #но в документации было указано что нужно указывать user_Id при отправлении пут запроса\n","    # ввод пользователя\n","    user_Id = requests_send_get(f'{url}/{id}')['userId']\n","    title = input('Введите заголовок нового поста:\\n')\n","    body = input('Введите текст нового поста:\\n')\n","    # добавление информации в словарь\n","    data = {'user_Id': user_Id, 'title':title, 'body':body}\n","    #отправление пут запроса\n","    response = requests.put(f'{url}/{id}',json = data)\n","\n","    #проверка на работоспособность\n","    if response.status_code == 200:\n","        return response.json()\n","    else:\n","        print('Номер ошибки', response.status_code)\n","\n","\n","#3)пункт задачи\n","def requests_send_delete(url):\n","    #ввод пользователя\n","    id = int(input('Введите id поста: \\n'))\n","    #отправка запроса на удаление\n","    response = requests.delete(f'{url}/{id}')\n","\n","    #провека на работоспособность\n","    if response.status_code == 200:\n","        print('Пост успешно удален')\n","    else:\n","        print('Номер ошибки', response.status_code)\n","\n","\n","def main():\n","    url = 'https://jsonplaceholder.typicode.com/posts'\n","    print(requests_send_post(url))\n","    print(requests_send_put(url))\n","    requests_send_delete(url)\n","\n","\n","main()"],"metadata":{"id":"jZUIdwq96DNl"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Задание 5. HTTP-запросы, ответы и пёсики"],"metadata":{"id":"0UoRc9vOD3XT"}},{"cell_type":"markdown","source":["**Описание**\n","\n","Создайте программу, которая будет взаимодействовать с Dog API, которая позволит получать список пород собак, вводить несколько пород и получать их фотогрфии.\n","\n","Этапы:\n","\n","1. Создайте функцию, которая использует метод GET и возвращает список всех пород собак в формате нумерованного списка\n","\n","2. Реализуйте возможность ввода нескольких пород собак через запятую\n","\n","\n","```\n","african, chow, dingo\n","```\n","\n","\n","\n","3. Создание функции, которая реализует запрос, возвращает и выводит изображениия собак, породы которых были введены до этого\n","\n","\n","Используйте Dog API (https://dog.ceo/dog-api/), который предоставляет информацию о породах собак и их изображения.\n"],"metadata":{"id":"y0EyPsFQ6mSZ"}},{"cell_type":"markdown","source":["*Подсказка*\n","\n","\n","\n","```\n","import requests\n","from PIL import Image\n","from IPython.display import display\n","import io\n","\n","url = <____>\n","response = <____>\n","        \n","if response.<______> == <___>:\n","      image_url = response.json()['message']\n","\n","res = requests.<__>(image_url)\n","img = Image.open(io.BytesIO(res.content))\n","display(img)\n","```\n","\n"],"metadata":{"id":"yrKv5k13AKEP"}},{"cell_type":"code","source":["import requests\n","from PIL import Image\n","from IPython.display import display\n","import io\n","\n","# 1) пункт\n","def list_all_breeds():\n","    #отправка запроса\n","    url = 'https://dog.ceo/api/breeds/list/all'\n","    responce = requests.get(url)\n","    #проверка на работоспособность\n","    if responce.status_code == 200:\n","        data = responce.json()\n","        cnt = 0\n","        breeds = []\n","        #проверка на подвиды собак или же их происхождение, не знаю как правильно сказать\n","        for k, v in data['message'].items():\n","            #если подвидов нет, то добавляем просто породу\n","            if v == []:\n","                cnt += 1\n","                breeds.append([cnt, k])\n","            #если есть подвиды то добавляем еще и происхождение\n","            else:\n","                for i in v:\n","                    cnt += 1\n","                    breeds.append([cnt, f'{k}-{i}'])\n","        return breeds\n","    else:\n","        print('Номер ошибки', responce.status_code)\n","        return None\n","\n","# 2) пункт\n","def input_breeds():\n","    breeds = input('Введите названия пород через запятую с пробелом, пример(african, chow, dingo)\\n').split(', ')\n","    return breeds\n","\n","# 3) пункт\n","def image_breed():\n","    breeds = input_breeds()\n","    #прохожусь по породам и смотрю есть у этой породы происхождение\n","    #из-за этого будет чуть меняться запрос\n","    for breed in breeds:\n","        #если у породы есть подвид:\n","        if '-' in breed:\n","            breed = breed.split('-')\n","            url = f'https://dog.ceo/api/breed/{breed[0]}/{breed[1]}/images/random'\n","            #отправляеми запрос чтобы получить url фотки\n","            responce = requests.get(url)\n","            #если все норм то\n","            if responce.status_code == 200:\n","                #забираю url фотки с помощью .json['message']\n","                res = responce.json()['message']\n","                #отправляю get запрос чтобы получить фото\n","                img_response = requests.get(res)\n","                #открываю фото и прописываю какой породе подпороде оно пренадлежит\n","                img = Image.open(io.BytesIO(img_response.content))\n","                print(breed)\n","                display(img)\n","                #проверка на ошибку при запросе на url фотки\n","            else:\n","                print('Номер ошибки', responce.status_code)\n","                return None\n","        else:\n","            url = f'https://dog.ceo/api/breed/{breed}/images/random'\n","            #отправляеми запрос чтобы получить url фотки\n","            responce = requests.get(url)\n","            if responce.status_code == 200:\n","                #забираю url фотки с помощью .json['message']\n","                res = responce.json()['message']\n","                #отправляю get запрос чтобы получить фото\n","                img_response = requests.get(res)\n","                #открываю фото и прописываю какой породе породе оно пренадлежит\n","                img = Image.open(io.BytesIO(img_response.content))\n","                print(breed)\n","                display(img)\n","                #проверка на ошибку при запросе на url фотки\n","            else:\n","                print('Номер ошибки', responce.status_code)\n","                return None\n","\n","def main():\n","    for i in list_all_breeds():\n","        print(*i)\n","    image_breed()\n","\n","\n","main()\n","\n","\n","##P.S. я начал делать практики на pycharm'e и при переносе кода происходит какая-то дич с табуляциями\n","#похоже в колабе табуляция это 2 пробела и я это только что заметил, надеюсь не забуду уточнить этот вопрос у вас"],"metadata":{"id":"5xti3KRP4Kzp"},"execution_count":null,"outputs":[]}]}