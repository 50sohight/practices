{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"17IcY1UTGzZMUteC1w_OLi1DXlUbhQRJu","timestamp":1731221166183}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["ФИО:"],"metadata":{"id":"77QKaqEE-ojL"}},{"cell_type":"markdown","source":["# Задание 1"],"metadata":{"id":"ra45s33wUt-C"}},{"cell_type":"markdown","source":["Задача: Создать чат бота для получения информации об исследованиях космоса\n","\n","Описание: Создайте комплексное приложение командной строки, которое будет использоваться в качестве панели управления исследованиями космоса. Данное приложение будет обращаться к https://api.nasa.gov/ для предоставления пользователям набора информации о космосе, включая:\n","\n","- Астрономическая картинка дня (APOD): Отображение APOD с пояснениями к нему.\n","- Фотографии с марсохода: позволяет пользователям выбирать и фильтровать фотографии с марсохода по дате и типу камеры.\n","- Объекты, сближающиеся с Землей (ОСЗ): Поиск и отображение информации об объекте, сближающихся с Землей, на определенную дату, включая их размеры и потенциальную опасность.\n","- Данные о космической погоде: Отображают последние данные о космической погоде, включая солнечные вспышки и геомагнитные бури.\n","Приложение должно позволять пользователям ориентироваться в этих функциях, корректно обрабатывать ошибки и обеспечивать удобство работы.\n","\n","Требования:\n","- Пользовательский ввод: Приложение должно предложить пользователю ввести данные, чтобы выбрать, какую функцию он хочет изучить.\n","- Проверка данных: Убедитесь, что пользовательские данные (например, даты) проверены.\n","- Обработка ошибок: Корректно обрабатывайте ошибки API и неверные ответы.\n","- Представление данных: Представляйте данные в четкой и организованной форме.\n","- Опция выхода: позволяет пользователям выходить из приложения в любое время."],"metadata":{"id":"G56D5mNCUwp5"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"wGeJM9n4UqUD"},"outputs":[],"source":["import requests\n","import datetime\n","from random import randint\n","\n","\n","#проверка на работоспособность запроса\n","def get(url):\n","    response = requests.get(url)\n","    if response.status_code == 200:\n","        return response.json()\n","    else:\n","        print(response.status_code)\n","        return None\n","\n","\n","#проверка на корректность даты\n","def validate_date(date):\n","    try:\n","        #разбиение предполагаемой даты год, месяц, день\n","        year, month, day = map(int,date.split('-'))\n","        #вызов datetime.data который должен преобразовать дату обратно, иначе вылетит ошибка ValueError\n","        #также проверка что дата меньше или равна сегодняшней дате\n","        if datetime.date(year, month, day) <= datetime.date.today():\n","            return True\n","        else:\n","            return False\n","    except ValueError:\n","        return False\n","\n","\n","def apod(token):\n","    url = f'https://api.nasa.gov/planetary/apod?api_key={token}&count=1'\n","    data = get(url)\n","    #проверка что выводиться именно фотка\n","\n","    while data[0]['media_type'] != 'image':\n","        data = get(url)\n","\n","    photo = data[0]['url']\n","    title = data[0]['title']\n","    photo_with_title = [photo,title]\n","    return photo_with_title\n","\n","\n","def mars_rover(token):\n","    date = input('Введите дату формата(2015-6-3)\\n')\n","    camera_list = ['FHAZ', 'RHAZ', 'MAST', 'CHEMCAM', 'MAHLI', 'MARDI', 'NAVCAM', 'PANCAM', 'MINITES']\n","    camera = input(f'Введите выберите одну из камер ({\", \".join(camera_list)})\\n')\n","    #проверка на корректность ввода даты и камеры\n","    if validate_date(date) and camera in camera_list:\n","        url = f'https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?earth_date={date}&camera={camera}&api_key={token}'\n","        data = get(url)\n","        #на случай того если с данными параметрами фото не найдено\n","\n","        while not(data['photos']):\n","            print('По заданным параметрам, фото не найдено, повторите ввод:')\n","            return mars_rover(token)\n","\n","        #для того чтобы выводить рандомные фото по одним и тем же параметрам\n","        id_list = randint(0,len(data['photos'])-1)\n","        photo = data['photos'][id_list]['img_src']\n","    else:\n","        print('Введенные данные неккоректные, попробуйте ввести данные еще раз')\n","        return mars_rover(token)\n","    return photo\n","\n","\n","def near_earth_objects(token):\n","    date = input('Введите дату формата(2015-6-3)\\n')\n","    #проверка на корректность даты\n","    if validate_date(date):\n","\n","        url = f'https://api.nasa.gov/neo/rest/v1/feed?start_date={date}&end_date={date}&api_key={token}'\n","        data = get(url)\n","\n","        #перевод даты из вида 2015-6-3 в вид 2015-06-03 так как в data['near_earth_objects'] лежит именно с гребаными нулями\n","        year, month, day = date.split('-')\n","        if len(month) == 1:\n","            month = '0' + month\n","        if len(day) == 1:\n","            day = '0' + day\n","        new_date = f'{year}-{month}-{day}'\n","\n","        main_information = []\n","        for i in data['near_earth_objects'][new_date]:\n","            name = i['name']\n","            diameter_max = f\"{round(i['estimated_diameter'] ['meters']['estimated_diameter_max'])}m\"\n","            diameter_min = f\"{round(i['estimated_diameter'] ['meters']['estimated_diameter_min'])}m\"\n","            hazardous_asteroid = f\"{i['is_potentially_hazardous_asteroid']}\"\n","            main_information.append([f'Название: {name}',\n","                                     f'Максимальный диаметр: {diameter_max}',\n","                                     f'Минимальный диаметр: {diameter_min}',\n","                                     f'Представляет опасность: {hazardous_asteroid}'])\n","\n","            result = ['; '.join(i) for i in main_information]\n","    else:\n","        print('Введенные данные неккоректные, попробуйте ввести данные еще раз')\n","        return near_earth_objects(token)\n","    return result\n","\n","\n","def donki(token):\n","    #cегодняшняя дата\n","    date = datetime.date.today()\n","\n","    data = {'FLR':[], 'GST':[]}\n","\n","    #блок отправляющий запрос о солнечных вспышках и добавляющий их типы в базу\n","    url_FlR = f'https://api.nasa.gov/DONKI/FLR?&startDate={date}&endDate={date}&api_key={token}'\n","    data_FLR = get(url_FlR)\n","    for dictionary in data_FLR:\n","        data['FLR'].append(dictionary['classType'])\n","\n","    # блок отправляющий запрос о магнитных бурях и добавляющий их типы в базу\n","    url_GST = f'https://api.nasa.gov/DONKI/GST?startDate={date}&endDate={date}&api_key={token}'\n","    data_GST = get(url_GST)\n","    for dictionary in data_GST:\n","        data['GST'].append(dictionary['classType'])\n","\n","    #заполнение финального сообщения, которое будет отправлено пользователю\n","    message = []\n","\n","    if len(data['FLR']) == 1:\n","        message.append(f\"Сегодня ожидается 1 солнечная вспышека, класса: {data['FLR'][0]}\")\n","    elif len(data['FLR']) == 0:\n","        message.append(f\"Сегодня не ожидается солнечных вспышек\")\n","    else:\n","        message.append(f\"Сегодня ожидается {len(data['FLR'])} солнечные вспышки, классов: {', '.join(data['FLR'])}\")\n","\n","    if len(data['GST']) == 1:\n","        message.append(f\"Сегодня ожидается 1 магнитная буря, класса: {data['GST'][0]}\")\n","    elif len(data['GST']) == 0:\n","        message.append(f'Сегодня не ожидается магнитных бурь')\n","    else:\n","        message.append(f\"Сегодня ожидается {len(data['GST'])} мыгнитных бурь, классов: {', '.join(data['GST'])}\")\n","\n","    return message\n","\n","\n","#честно не хочу уже комментировать, я устал(\n","#основной блок работы программы\n","def main():\n","    print('Для использования фунцкии, введите ее номер\\n'\n","          'Чтобы закончить работать с программой, оставьте пустой ввод и нажмите <Enter>\\n'\n","          '1)Астрономическая картинка\\n'\n","          '2)Фотографии с марсохода\\n'\n","          '3)Обьекты, сближающиеся с Землей\\n'\n","          '4)Космическая погода'\n","          )\n","    while n:=input('Введите номер функции: \\n'):\n","        if n == '1':\n","            print('\\n'.join(apod(token)))\n","        elif n == '2':\n","            print(mars_rover(token))\n","        elif n == '3':\n","            print('\\n'.join(near_earth_objects(token)))\n","        elif n == '4':\n","            print('\\n'.join(donki(token)))\n","        else:\n","            print('Неккоректный ввод')\n","\n","\n","token = 'u2bczvNxJePTUPzxTZ5YHFBq198zzOnvGczfChRp'\n","\n","main()"]},{"cell_type":"markdown","source":["# Задание 2"],"metadata":{"id":"ia9UtA0cU1Iy"}},{"cell_type":"markdown","source":["Описание задачи\n","\n","Цель этой задачи - создать скрипт на Python, который взаимодействует с API Чикагского института искусств (https://api.artic.edu/docs/) для извлечения и отображения произведений искусства. Скрипт должен позволять пользователям просматривать работы по страницам, фильтровать их по имени художника и просматривать подробную информацию о выбранных произведениях искусства. Ниже приведены требования и функциональные возможности, которые необходимо реализовать:\n","\n","Требования:\n","Извлекать произведения искусства:\n","\n","- Создайте функцию, которая извлекает список произведений искусства из API Чикагского института искусств.\n","Функция должна принимать параметр page для разбивки на страницы и возвращать список произведений искусства вместе с информацией о разбивке на страницы.\n","Фильтровать произведения искусства:\n","\n","- Реализуйте функцию, которая фильтрует список произведений искусства на основе имени указанного художника. Функция должна возвращать список работ, которые соответствуют имени художника (без учета регистра).\n","Отображать подробную информацию об оформлении:\n","\n","- Напишите функцию, которая отображает названия работ для пользователя и позволяет ему выбрать одну из них, введя соответствующий номер.\n","После выбора функция должна отображать подробную информацию о выбранном произведении, включая название, исполнителя, дату и носитель.\n","Разбивка на страницы и взаимодействие с пользователем:\n","\n","- Создайте основную функцию, которая управляет выборкой произведений и взаимодействием с пользователем.\n","\n","Разрешите пользователям перемещаться по страницам с произведениями искусства, выполнять фильтрацию по исполнителю или выходить из программы.\n","\n","Если страниц с произведениями искусства несколько, укажите варианты перехода к следующей странице, предыдущей странице, фильтрации по исполнителю или выхода из программы."],"metadata":{"id":"Ofu_GmqrU1Iy"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"jjUH1GznU1Iy"},"outputs":[],"source":["import requests\n","\n","\n","def get(url):\n","    response = requests.get(url)\n","    if response.status_code == 200:\n","        return response.json()\n","    else:\n","        print(response.status_code)\n","        return None\n","\n","\n","def works_of_art(page):\n","    # вывод странички с артворками\n","    url = f'https://api.artic.edu/api/v1/artworks?fields=id,title,artist_title,classification_titles,date_display&page={page}&limit=25'\n","    base = get(url)\n","    sort_information = []\n","    # достаю из json и привожу к более красивому виду и отсортированному виду всю инфу\n","    for information_of_art in base['data']:\n","        id = information_of_art['id']\n","        title = information_of_art['title']\n","        artist_information = information_of_art['artist_title'] if information_of_art['artist_title'] != None else 'Неизвестен'\n","        sort_information.append([f\"ID:{id}\", f\"Название произведения искусства: {title}\", f\"Имя автора: {artist_information}\"])\n","    # объединение информации в строки\n","    message = ['; '.join(work) for work in sort_information]\n","    return message\n","\n","\n","def name_of_the_creator(name, page):\n","    # сортировка страница по имени\n","    url = f'https://api.artic.edu/api/v1/artworks?fields=id,title,artist_title,classification_titles,date_display&page={page}&limit=25'\n","    base = get(url)\n","    sort_information = []\n","    # аналогично как с функцией works_of_art(page), только еще идет проверка на совпадение имени\n","    for information_of_art in base['data']:\n","        id = information_of_art['id']\n","        title = information_of_art['title']\n","        artist_information = information_of_art['artist_title'] if information_of_art['artist_title'] != None else 'Неизвестен'\n","        if artist_information == name:\n","            sort_information.append([f\"ID:{id}\", f\"Название произведения искусства: {title}\"])\n","    # объединение информации в строки\n","    message = ['; '.join(work) for work in sort_information]\n","    return message\n","\n","\n","def detailed_information(page, id):\n","    # более детальный вывод информации\n","    url = f'https://api.artic.edu/api/v1/artworks?fields=id,title,artist_title,classification_titles,date_display&page={page}&limit=25'\n","    base = get(url)\n","    sort_information = []\n","    # аналогично как и с name_of_the_creator(name,page) только тут идет проверка на совпадение id\n","    for information_of_art in base['data']:\n","        if information_of_art['id'] == id:\n","            title = information_of_art['title']\n","            artist_information = information_of_art['artist_title'] if information_of_art['artist_title'] != None else 'Неизвестен'\n","            classification = information_of_art['classification_titles']\n","            if classification:\n","              date = information_of_art['date_display']\n","              sort_information.append([f'Дата начала/окончания работ: {date}',\n","                                      f'Название: {title}',\n","                                      f'Автор: {artist_information}',\n","                                      f'Классификация: {classification[0]}'])\n","            else:\n","              date = information_of_art['date_display']\n","              sort_information.append([f'Дата начала/окончания работ: {date}',\n","                                      f'Название: {title}',\n","                                      f'Автор: {artist_information}',\n","                                      f'Классификация: классификация отсутствует'])\n","    message = ['; '.join(work) for work in sort_information]\n","    return message\n","\n","\n","def main():\n","    # основной блок\n","    print('1)Страница с произведениями искусств\\n'\n","          '2)Поиск произведений искусств по автору\\n'\n","          '3)Расширенная информация о данном произведении искусства\\n'\n","          'Пустой ввод на главной странице означает завершение работы программы!')\n","    while n := input('Введите номер функции:\\n'):\n","        if n == '1':\n","            page = int(input('Введите номер страницы(всего найдено:5053 страниц):\\n'))\n","            if 0 < page <= 5053:\n","                print('\\n'.join(works_of_art(page)))\n","            else:\n","                print('Некорректный ввод страницы')\n","\n","        elif n == '2':\n","            page = int(input('Введите номер страницы(всего найдено:5053 страниц):\\n'))\n","            if 0 < page <= 5053:\n","                name = input('Введите имя автора:\\n')\n","                result = '\\n'.join(name_of_the_creator(name, page))\n","                if not result or name in ['Неизвестен', 'Artist unknown']:\n","                    print('artist не найден на данной страничке/произведен некорректный ввод')\n","                else:\n","                    print(result)\n","            else:\n","                print('Некорректный ввод страницы')\n","\n","        elif n == '3':\n","            page = int(input('Введите номер страницы(всего найдено:5053 страниц):\\n'))\n","            if 0 < page <= 5053:\n","                id = int(input('Введите id произведения искусства:\\n'))\n","                result = detailed_information(page, id)\n","                if result:\n","                    print(''.join(result))\n","                else:\n","                    print('Введен некорректный id')\n","            else:\n","                print('Некорректный ввод страницы')\n","\n","        elif n == '':\n","            break\n","        else:\n","            print('Некорректный ввод страницы')\n","\n","\n","main()\n"]},{"cell_type":"markdown","source":["# Задание 3"],"metadata":{"id":"eecUb-akU1ji"}},{"cell_type":"markdown","source":["Задача: Создать программу по управлению портфелем криптовалют\n","\n","Цель: Создать скрипт на Python, который извлекает цены на криптовалюты в режиме реального времени, позволяет пользователям управлять портфелем криптовалют, вычисляет общую стоимость портфеля, отслеживает изменения цен и предоставляет исторические данные о ценах для анализа.\n","\n","Требования:\n","Получение текущих цен на криптовалюты:\n","\n","Используйте https://docs.coingecko.com/ для получения актуальных цен на список криптовалют.\n","\n","Управление портфелем:\n","\n","- Позволяет пользователю создавать портфель криптовалют и управлять им, указывая количество каждой криптовалюты, которой он владеет.\n","- Расчитывает общую стоимость портфеля в указанной фиатной валюте (например, долларах США).\n","\n","Отслеживание изменения цен:\n","\n","- Отображение процентного изменения цены для каждой криптовалюты в портфеле за последние 24 часа.\n","- Выделите все криптовалюты, стоимость которых значительно увеличилась или снизилась.\n","\n","Поиск исторических данных о ценах:\n","\n","- Получение исторических данных о ценах на указанную криптовалюту за последнюю неделю.\n","- Предоставьте пользователю возможность визуализировать эти данные в простом текстовом формате (например, цены за день).\n","\n","Взаимодействие с пользователем:\n","\n","- Реализуйте интерфейс командной строки для ввода данных пользователем.\n","- Предоставьте опции для получения текущих цен, управления портфелем, просмотра изменений цен или анализа исторических данных.\n"],"metadata":{"id":"jsK7IKptU1ji"}},{"cell_type":"code","source":["import requests\n","\n","\n","#отправка и проверка get запроса\n","def get(url):\n","    headers = {\n","        \"accept\": \"application/json\",\n","        \"User-Agent\": \"Mozilla/5.0\",\n","        \"x-cg-pro-api-key\": \"USER-TOKEN\"\n","    }\n","    responce = requests.get(url, headers=headers)\n","    if responce.status_code == 200:\n","        return responce.json()\n","    else:\n","        print(responce.status_code)\n","        return None\n","\n","\n","#функция для создания нескольких акканутов\n","#в конце понял что досаточно бесполезно, но пусть будет\n","def account():\n","    check = input('Если у вас уже есть аккаунт впишите \"ДА\",\\n'\n","          'Иначе введите \"НЕТ\"\\n').lower()\n","\n","    #обработка ввода: <нет>, и проверка на ошибки\n","    if check == 'нет':\n","        name = input('Введите свое имя:\\n').lower()\n","        #проверка на ошибки\n","        if name in user_data.keys():\n","            print('Человек с таким именем уже зарегестрирован\\n'\n","                  'Введите другое имя!')\n","            return account()\n","        else:\n","            user_data[name] = {}\n","            print('Ваш аккаунт успешно создан!')\n","            return name\n","    # обработка ввода: <да>, и проверка на ошибки\n","    elif check == 'да':\n","        name = input('Введите свое имя:\\n').lower()\n","        flag = False\n","        #проверка на ошибки\n","        if name in user_data.keys():\n","            print('Ваш аккаунт найден!\\n'\n","                  'Вы успешно вошли')\n","            flag = True\n","            return name\n","        if not flag:\n","            print('Ваш аккаунт не найден!\\n'\n","                  'Повторите ввод:')\n","            return account()\n","\n","    #обработка неккоректного ввода\n","    else:\n","        print('Неккоректный ввод')\n","        return account()\n","\n","\n","#пополнение аккаунта\n","def refill(name):\n","    #отправление get запроса для вывода всех монет\n","    url = \"https://api.coingecko.com/api/v3/coins/list\"\n","    coins_data = get(url)\n","    #создаю список со всеми названиями монет\n","    name_coins_data = [coin['name'] for coin in coins_data]\n","\n","    user_input = input('Введите название криптовалюты и количество криптовалюты через пробел, учтите что для названия монеты важен регистр:\\n'\n","                        'Пример ввода(Bitcoin 200)\\n'\n","                        'Если вам требуется список всех криптовалют введите \"СПИСОК\"\\n')\n","\n","    #использую try для обработки ошибки если введут какой-то непонятный текст, например: <jdfgjdfgjdj>\n","    try:\n","        #вывод список всех монет\n","        if user_input.lower() == 'список':\n","            print(f\"Пополнить портфель можно одной из валют:\\n\"\n","                  f\"{', '.join(name_coins_data)}\")\n","            return refill()\n","\n","        #пополение аккаунта\n","        else:\n","            user_coin = user_input.split()[0]\n","            user_amount = user_input.split()[1]\n","            #проверка на то что название монеты корректное и число действительно является числом\n","            if user_coin in name_coins_data and len(user_amount)==len([i for i in user_amount if i in'0123456789']):\n","                #если монеты добавлена ранее\n","                if user_coin in user_data[name].keys():\n","                    user_data[name][user_coin]['amount'] += int(user_amount)\n","                # если монету добавляем впервые\n","                else:\n","                    user_data[name][user_coin] = {}\n","                    user_data[name][user_coin]['amount'] = int(user_amount)\n","                    user_data[name][user_coin]['id'] = ''.join([coin['id'] for coin in coins_data if coin['name']==user_coin])\n","                return 'Ваш балан пополнен'\n","\n","            else:\n","                return 'Введена неправильная монета или ее количество'\n","    except IndexError:\n","        print('Неккоректный ввод, попробуйте еще раз:')\n","        return refill()\n","\n","\n","#просмотр монет и их кол-ва на аккаунте\n","def check(name):\n","    user_account = ', '.join(f\"{coin} : {amount['amount']}\" for coin, amount in user_data[name].items())\n","    if user_account:\n","        return user_account\n","    else:\n","        message = 'На вашем счету нет активов:('\n","        return message\n","\n","\n","#вывод цены аккаунта\n","def total_price(name):\n","    sm = 0\n","    #тут я прохожусь отдельно по каждой монете так как при использовании одного запроса на все монеты\n","    #у меня вылетала ошибка, с чем это связано не знаю, также даже этот запрос не всегда работает корректно\n","    #то есть если вы будете добавлять допустим Bitcoin и Ethereum или одну из этих монет то все заработает с шансом 99%\n","    #если вы будете использовать какую-то ноунейм монету то возможен вылет ошибки 400, хотя при этом ссылка абсолютно корректная\n","    #вы можете если что добавить потом print(url) и перейти по ссылке на которой выбивает 400 ошибку, ссылка будет рабочей\n","    #аналогичные ошибки могут вылетать и в других функциях, допустим если делать много запросов и превышен лимит запросов будет ошибка 429\n","    for key in user_data[name].keys():\n","        amount_and_id = user_data[name][key]\n","        url = f\"https://api.coingecko.com/api/v3/simple/price?ids={amount_and_id['id']}&vs_currencies=usd\"\n","        #print(url)\n","        coin_information = get(url)\n","        sm+=coin_information[amount_and_id['id']]['usd']*amount_and_id['amount']\n","    message = f'Ваш портфель стоит: {round(sm)}$'\n","    return message\n","\n","\n","#изменение цены за день\n","def day_edit_price(name):\n","    #отправка get запроса чтобы составить список из кортежей вида <название монеты>:<ее айди>\n","    coin = input('Введите название монеты:\\n')\n","    url = \"https://api.coingecko.com/api/v3/coins/list\"\n","    coins_data = get(url)\n","    name_and_id_coin= [{coin['name']:coin['id']} for coin in coins_data]\n","\n","    #поиск нужного айди по имени\n","    id = ''\n","    for coin_information in name_and_id_coin:\n","        for k,v in coin_information.items():\n","            if k == coin:\n","                id = v\n","\n","    #если ввели корректное имя, то делаем запрос на изменение цены за день\n","    if id != '':\n","        url = f\"https://api.coingecko.com/api/v3/simple/price?ids={id}&vs_currencies=usd&include_24hr_change=true\"\n","        data_edit_price = get(url)\n","        #цена сейчас\n","        price_now = round(data_edit_price[id]['usd'])\n","        #изменение цены в процентах\n","        edit_price = round(data_edit_price[id]['usd_24h_change'],1)\n","        #цена 24 часа назад\n","        day_before_price = round(price_now/(100+edit_price)*100)\n","        message = f'Изменения {coin} за день составили {edit_price}% с {day_before_price}$ до {price_now}$'\n","        return message\n","    else:\n","        message = 'Введена некорректная монета'\n","        return message\n","\n","\n","#статиска изменения цены монеты за неделю\n","def statistic_seven_days(name):\n","    #аналогично с функцией <day_edit_price()>\n","    coin = input('Введите название монеты:\\n')\n","    url = \"https://api.coingecko.com/api/v3/coins/list\"\n","    coins_data = get(url)\n","    name_and_id_coin = [{coin['name']: coin['id']} for coin in coins_data]\n","\n","    id = ''\n","    for coin_information in name_and_id_coin:\n","        for k, v in coin_information.items():\n","            if k == coin:\n","                id = v\n","\n","    if id != '':\n","        #запрос на изменения цены за 7 дней\n","        url = f'https://api.coingecko.com/api/v3/coins/{id}/market_chart?vs_currency=usd&days=7'\n","        #на случай ошибки в get запросе, чтобы можно было проверить работоспособность ссылки оставляю print\n","        #print(url)\n","        data = get(url)\n","        data_statistic = data['prices']\n","        #записываю каждый день в отдельную переменую с промежутком 24, так как наш data_statistic имеет почасовое изменение цены за неделю\n","        seven_day = round(data_statistic[24-1][1])\n","        sixth_day = round(data_statistic[48-1][1])\n","        fifth_day = round(data_statistic[72-1][1])\n","        fourth_day = round(data_statistic[96-1][1])\n","        third_day = round(data_statistic[120-1][1])\n","        second_day = round(data_statistic[144-1][1])\n","        first_day = round(data_statistic[168-1][1])\n","        message = (f'Статистика за последнюю неделю:\\n'\n","                   f'Цена 6 дней назад: {seven_day}$\\n'\n","                   f'Цена 5 дней назад: {sixth_day}$\\n'\n","                   f'Цена 4 дней назад: {fifth_day}$\\n'\n","                   f'Цена 3 дней назад: {fourth_day}$\\n'\n","                   f'Цена 2 дней назад: {third_day}$\\n'\n","                   f'Цена 1 дней назад: {second_day}$\\n'\n","                   f'Цена сейчас: {first_day}$\\n')\n","        return message\n","    else:\n","        message = 'Неккоректный ввод'\n","        return message\n","\n","\n","#основной блок программы\n","def main():\n","    name = account()\n","    print('Добро пожаловать! Вот возможные команды:\\n'\n","          '1)Пополнить счет\\n'\n","          '2)Просмотр портфеля\\n'\n","          '3)Общая сумма портфеля\\n'\n","          '4)Изменение цены за день\\n'\n","          '5)Аналитика за неделю\\n'\n","          '6)Выйти из аккаунта\\n'\n","          'Учтите что пустой ввод в главном меню означает завершение работы программы')\n","    while n := input('Введите номер функции:\\n'):\n","        if n == '1':\n","            print(refill(name))\n","        elif n == '2':\n","            print(check(name))\n","        elif n == '3':\n","            print(total_price(name))\n","        elif n == '4':\n","            print(day_edit_price(name))\n","        elif n == '5':\n","            print(statistic_seven_days(name))\n","        elif n == '6':\n","            account()\n","        elif n == '':\n","            break\n","        else:\n","            print('Некорректный ввод')\n","\n","\n","user_data = {}\n","main()"],"metadata":{"id":"_0DToTqlvywa"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Дополнительно: Задание 4"],"metadata":{"id":"QGrsZrv5U1s8"}},{"cell_type":"markdown","source":["Задание 4: Проектное\n","\n","Вам необходимо самостоятельно найти откртое API предоставляющее информацию в открытом доступе и реализовать собственный проект!\n","\n","\n","Критерии приемки результата:\n","\n","- Проект включает в себя не менее 5 возможостей для пользователя\n","- Проект позволяет использовать все возможности проекта пользователю при помощи взаимодействия через коммандную строку\n","- Проект работает с открытым API (это значит что при проверке вашей работы преподавателем, преподавателю необходимо просто запустить ячейку с кодом вашего проекта и она будет работать без дополнительных манипуляции)\n","- Проект должен обязательно включать в себя ряд используемых конструкции:\n","    - Функции\n","    - Условные конструкции\n","    - Ввод/вывод\n","    - Словари/Списки\n","- Допускается использование библиотек:\n","    - requests\n","    - datetime\n","    - random"],"metadata":{"id":"qs_XITmYU1s8"}},{"cell_type":"markdown","source":["**Здесь добавьте описание вашего проекта**"],"metadata":{"id":"VKXhaJi4FL0B"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"wiA55k1KU1s8"},"outputs":[],"source":["#  А здесь код"]}]}